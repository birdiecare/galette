// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`it displays only one loading indicator on the first page 1`] = `
<RCTScrollView
  canLoadMore={true}
  displayLoading={false}
  distanceToLoadMore={100}
  isLoading={true}
  onLoadMoreAsync={[Function]}
  onScroll={[Function]}
  refreshControl={
    <RefreshControlMock
      onRefresh={[Function]}
      refreshing={true}
      tintColor="#fff"
      title="Loading..."
      titleColor="#fff"
    />
  }
  renderLoadingErrorIndicator={[Function]}
  renderLoadingIndicator={[Function]}
  scrollEventThrottle={100}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RCTRefreshControl />
  <View>
    <RCTScrollView
      data={
        Array [
          Object {
            "foo": "bar",
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <Text>
            bar
          </Text>
        </View>
      </View>
    </RCTScrollView>
  </View>
</RCTScrollView>
`;

exports[`it displays the bottom loading indicator when more than one page has been loaded 1`] = `
<RCTScrollView
  canLoadMore={true}
  displayLoading={true}
  distanceToLoadMore={100}
  isLoading={true}
  onLoadMoreAsync={[Function]}
  onScroll={[Function]}
  refreshControl={
    <RefreshControlMock
      onRefresh={[Function]}
      refreshing={true}
      tintColor="#fff"
      title="Loading..."
      titleColor="#fff"
    />
  }
  renderLoadingErrorIndicator={[Function]}
  renderLoadingIndicator={[Function]}
  scrollEventThrottle={100}
  style={
    Object {
      "flex": 1,
    }
  }
>
  <RCTRefreshControl />
  <View>
    <RCTScrollView
      data={
        Array [
          Object {
            "foo": "bar",
          },
          Object {
            "foo": "baz",
          },
        ]
      }
      disableVirtualization={false}
      getItem={[Function]}
      getItemCount={[Function]}
      horizontal={false}
      initialNumToRender={10}
      keyExtractor={[Function]}
      maxToRenderPerBatch={10}
      onContentSizeChange={[Function]}
      onEndReachedThreshold={2}
      onLayout={[Function]}
      onMomentumScrollEnd={[Function]}
      onScroll={[Function]}
      onScrollBeginDrag={[Function]}
      onScrollEndDrag={[Function]}
      removeClippedSubviews={false}
      renderItem={[Function]}
      scrollEventThrottle={50}
      stickyHeaderIndices={Array []}
      updateCellsBatchingPeriod={50}
      viewabilityConfigCallbackPairs={Array []}
      windowSize={21}
    >
      <View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <Text>
            bar
          </Text>
        </View>
        <View
          onLayout={[Function]}
          style={null}
        >
          <Text>
            baz
          </Text>
        </View>
      </View>
    </RCTScrollView>
    <View
      style={
        Object {
          "alignItems": "center",
          "backgroundColor": "transparent",
          "flex": 1,
          "justifyContent": "center",
          "padding": 20,
        }
      }
    >
      <ActivityIndicator
        animating={true}
        color="#999999"
        hidesWhenStopped={true}
        size="small"
      />
    </View>
  </View>
</RCTScrollView>
`;
